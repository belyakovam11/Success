name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django
          POSTGRES_PASSWORD: django
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U django" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify Docker Compose installation

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: ~/.docker/cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      - name: Run backend tests
        run: |
          docker-compose -f docker-compose.yml run test-runner

      - name: Run frontend tests (optional)
        run: |
          docker-compose -f docker-compose.yml run frontend npm test

  # Job for deploying (optional, depending on your setup)
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Deploy to production server
        run: |
          # Example deployment steps
          echo "Deploying to production server"
          # Add your deployment script here, e.g., SSH into your server and deploy
